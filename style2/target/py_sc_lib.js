'use strict';var pycodestyle={};var sys={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,
__init__,__ior__,__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,
filter,float,getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import*as __module_pycodestyle__ from"./pycodestyle.js";__nest__(pycodestyle,"",__module_pycodestyle__);import*as __module_sys__ from"./sys.js";__nest__(sys,"",__module_sys__);var __name__="py_sc_lib";export var __author__="Karen Peterson";
export var __date__="6/15/2020";export var file_len=function(fname){try{var file_to_read=open(fname);try{file_to_read.__enter__();var count=0;for(var _line of file_to_read)var count=count+1;file_to_read.__exit__()}catch(__except0__){if(!file_to_read.__exit__(__except0__.name,__except0__,__except0__.stack))throw __except0__;}return count}catch(__except0__){if(isinstance(__except0__,OSError))return-1;else throw __except0__;}};export var get_config_file=function(){return""};export var read_config_file=
function(){var total_file_count=0;var total_line_count=0;var total_missing=0;var web_pylint_opts=" --persistent=n --score=n ";var check_files=[];var filepath="config_sc.txt";var input_file=open(filepath,"r");try{input_file.__enter__();var path=Path(filepath).parent.absolute();var text=input_file.read();os.chdir(path);var lines=text.py_split("\n");for(var line of lines){var words=line.py_split();if(len(words)>=2&&words[0]=="LintIgnore:")web_pylint_opts+=" --disable="+words[1];else if(len(words)>=2&&
words[0]=="File:"){check_files.append(words[1]);total_file_count++;var line_count=file_len(words[1]);if(line_count<=0)total_missing++;else total_line_count+=line_count}}input_file.__exit__()}catch(__except0__){if(!input_file.__exit__(__except0__.name,__except0__,__except0__.stack))throw __except0__;}return tuple([total_file_count,total_line_count,total_missing,web_pylint_opts,check_files])};export var PyFile=__class__("PyFile",[object],{__module__:__name__,get __init__(){return __get__(this,function(self){self.err_count=
0;self.line_count=0;self.web_pylint_opts="";self.filename="";self.file_text="";self.results=""})}});export var PyStyleCheckData=__class__("PyStyleCheckData",[object],{__module__:__name__,get __init__(){return __get__(this,function(self){self.total_err_count=0;self.total_file_count=0;self.total_line_count=0;self.total_missing=0;self.web_pylint_opts="";self.check_files=[];self.score=0})}});export var WebPyCodeStyleReport=__class__("WebPyCodeStyleReport",[pycodestyle.StandardReport],{__module__:__name__,
get get_file_results(){return __get__(this,function(self){self._deferred_print.py_sort();var results=[];for(var style_part of self._deferred_print)results.append(tuple([self.filename,style_part[0],style_part[1]+1,style_part[2],style_part[3],style_part[4]]));return results})}});export var run_pylint=function(file_to_check,web_pylint_opts,file_text){var output="pylint style checker...\n";return output};export var run_pycodestyle=function(check_files,file_text){var output="\n\npycodestyle style checker...\n";
var lines=file_text.py_split("\n");for(var i=0;i<len(lines);i++)lines[i]=lines[i]+"\n";var style_checker=pycodestyle.Checker(__kwargtrans__({reporter:WebPyCodeStyleReport,lines:lines}));style_checker.filename=check_files[0];var result=style_checker.check_all();print(result);for(var style_part of result)output+="{:s}:{:d}:{:d}: {:s} {:s}\n".format(style_part[0],style_part[1],style_part[2],style_part[3],style_part[4]);return output;var style_checker=pycodestyle.StyleGuide(__kwargtrans__({reporter:WebPyCodeStyleReport}));
var result=style_checker.check_files(check_files);for(var style_part of result.get_file_results())output+="{:s}:{:d}:{:d}: {:s} {:s}\n".format(style_part[0],style_part[1],style_part[2],style_part[3],style_part[4]);return output};export var process_one_file=function(file_to_check){print("KP process",file_to_check.filename);var output="-------------------------------------------\n";output+="Checking "+file_to_check.filename+"\n\n";output+=run_pycodestyle([file_to_check.filename],file_to_check.file_text);
output+="\n-------------------------------------------\n";file_to_check.results=output;file_to_check.err_count=output.count(".py:");file_to_check.line_count=file_to_check.file_text.count("\n")+1};export var get_summary_results=function(pystyle_data,a,b){pystyle_data.total_err_count=0;pystyle_data.total_file_count=0;pystyle_data.total_line_count=0;pystyle_data.total_missing=0;pystyle_data.web_pylint_opts="";var output="";for(var file of pystyle_data.check_files){pystyle_data.total_err_count+=file.err_count;
pystyle_data.total_line_count+=file.line_count;output+=file.results}var start_score=(pystyle_data.total_line_count-pystyle_data.total_err_count)/pystyle_data.total_line_count*100;var score=start_score;var missing="";if(pystyle_data.total_missing>0){var missing_penalty=pystyle_data.total_missing/len(pystyle_data.check_files)*100;score-=missing_penalty;var missing="\n- {:.1f}% for missing files".format(missing_penalty)}pystyle_data.score=score;var format_str="Score: {:.1f}%\n\n"+"Found {:d} errors / {:d} total lines = {:.1f}%{:s}\n{:s}";
var output=format_str.format(score,pystyle_data.total_err_count,pystyle_data.total_line_count,start_score,missing,output);return output};export var get_final_grade=function(pystyle_data){return pystyle_data.score};

//# sourceMappingURL=py_sc_lib.map